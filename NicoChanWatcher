#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'base64'
require 'rest_client'
require 'xmlsimple'
require 'ruby-growl'
require 'pp'


class Icon
  attr_reader :image
  # http://www.kanshin.com/keyword/2043123
  # * http://storage.kanshin.com/free/img_49/497961/k1109786399.jpg
  MIGIUE = "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsL\nDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\nwAALCAA3ADkBASIA/8QAGgABAQADAQEAAAAAAAAAAAAABQYABAcDAf/EADgQ\nAAEDAgUBBQUECwAAAAAAAAECAwQFEQAGEiExExQiQVFhByRxgZEWQlKhFTND\nVXJ1kpSxwdH/2gAIAQEAAD8A7/jMaUOfDmqfTFlMvqjuFp4NrCumscpNuD6Y\n3cFtVaGquO0dDhXMbZ67iUpJCEk2Go8AnwHkMKYzGYLrlXYoNIfqclDi2WAC\npLYBUq5AAFyByRiZT7V8pdNBfnvMuKQFKaXGc1IJF7GwIuPQnAVWzhkqfObq\ntNr5ptZbG0lMN0peT+B1Onvp2HqNrHHg97ZGnIaYjaY7FQKihyYQtcZA/GkB\nOtV/BJA9ThHL2d8j0WIWGqu+++6vqSJbsZ0rfcPKlHT9B4YcX7TcpoSoipOL\nCQSdMR42Hr3NsUVMqUWrU2PUYTnUjvo1oVa23w8/DG/iW9oRUMmydN79ePwb\nftkYHj0uXW84ZkZOYKxDZiusdNqLICUjW0FHYg+PlbCy8t11sJRCzlUW2wOJ\nEZh5X9RSD9b4+HL+aCQPtq/o/l7Gr62/1g3McdFBgJl1vOtbZbUrppLKWklS\niCbAIbv4YMqKVluk1CHmap1ODOalp0vOJDawIzqhdKUp3BTwobEcAjFXkBhM\nfIdFQk31RkuH4q7x/wA4psTHtAF8iVc7dxkL38dKgbflibqNKqlVqubIVGqA\niTJDUB9LoWUfdUkpKk7i4RyPh4nFdlOn1Sl5ciw6zN7XPb1dR7WpdwVEgalb\nmwIF8L9VvrdHWnq6dWi+9uL28sHVuhU/MEAwqpFTIj6gvSSQQocEEEEHkbHg\nkeOJvMsKNBGXaXCjobZT2pDSU/dAiOi3re/OG8kI0ZGoYKtXuTRvbzSDigxO\n56CDkWt6wCOxuc+dtvztgaj1CDBz3mDtc2OwXIsEjquhN7IXfk+o+oxVfp+j\nfveB/co/7ji7uXK6zmJeZnc55cTUEu60uKmnTbjSe7sm21t9tsdS+32VwrQq\nvQtQG6gvu39Dx+eBq5XKPWqlRWqXUY0t7rSCeg6lSkDsro4G43tikycdWSqE\nbAe4MbD+AYcwJmiCapludT0yEMLlNFtK1pKgL+gOOVV2PVkVV5yoPU1Uh5hH\nQ9yQ5rIUEhIUoXJFxzfb54WTkyXYXmUxPmBRo5t8ynG1HyrJjupdRUISHE8K\nbo8ZJHz049qm1mWJT1OxK2t4tblpMBi5T46Ro59MFxzmyqIkOU7MXuqVaGy9\nBaZLhKe8dm7gC9uN9+MdEy1GchZYpsF1xtb0WM2y4W72ulIG17Hww1jTmw+1\noTZWlaeL8YGkU5aXEl5lJUk3So2Nvh5Y8ztzjMYN+Me7EV1/9WAR5k2wtCh9\nkQq6tS1c24xuY//Z"
  def initialize(path = nil)
    @image = if path
               IO.read(path)
             else
               Base64.decode64(MIGIUE).force_encoding("UTF-8")
             end
  end
end


class Channel
  attr_reader :url, :title, :latest

private
  def get_html(url)
    html = RestClient.get(url, :accept=>"text/html", :accept_charset=>"utf-8")
    html.force_encoding("UTF-8")
    html.split(/[\r\n\t]/).delete_if{|l| l==""}
  end

  def channel_title(html)
    XmlSimple.xml_in(html.grep(/<title>/).join(""))
  end

  def latest_video_title(html)
    html.inject({:html=>[]}){|r,h|
      case r[:mode]
      when nil
        r[:mode] = h=~%r{g-thumb-watch_link}
        r[:html] << h if r[:mode]
      else
        r[:html] << h
        r[:mode] = h=~%r{p-footer}
      end
      r
    }[:html].join =~ %r{(http://www.nicovideo.jp/watch/\d+)}
    watch = $1

    og_title = get_html(watch).grep(%r{og:title}).join+"</meta>"
    {:url=>watch, :title=>XmlSimple.xml_in(og_title)["content"].strip}
  end

  def load(prev_url)
    html = get_html(@url)
    @title = channel_title(html).split("-")[0].strip
    @latest = latest_video_title(html)
    @latest[:prev_url] = prev_url
  end

public
  def initialize(url, prev_url)
    @url = url
    @url = "http://ch.nicovideo.jp/channel/#{url}" unless @url=~%r{^http://}
    load(prev_url)
  end

  def updated?
    @latest[:url]!=@latest[:prev_url]
  end
end


class NicoNicoChannel
private
  @notification = "nicochannel checking notification"

public
  attr_reader :channels
  def initialize(config_file)
    @config_file = config_file
    @growl = Growl.new("localhost", "NicoNico channel watcher")
    icon = Icon.new
    @growl.add_notification("newVideoAdded", "New video is INCOMING", icon.image)
    @conf = YAML.load_file(@config_file)
    @urls = @conf["channels"] || []
    @channels = @conf["latest"] || {}
    if @conf["growl"]
      @priority = @conf["growl"]["priority"] || 0
      @sticky = @conf["growl"]["sticky"] || false
    else
      @priority = 0
      @sticky = false
    end
  end

  def update
    @channels = @urls.inject({}){|r, url|
      prev_url = @channels[url] ? @channels[url].latest[:url] : nil
      ch = Channel.new(url, prev_url)
      r[url] = ch
      r
    }
  end

  def notify(all = false)
    @channels.each{|url, ch|
      @growl.notify("newVideoAdded", ch.title, ch.latest[:title], @priority, @sticky) if ch.updated? or all
    }
  end

  def save
    conf = @conf.merge({"latest"=>@channels, "last_updated"=>Time.now.iso8601})
    File.open(@config_file, "w") {|f|
      f.write conf.to_yaml
    }
  end
end

conf = File.expand_path("~/.NicoChanWatcher.yaml")

if ARGV[0]=='--help'
  puts <<__USAGE__
NicoNicoChannel [options]
  https://github.com/suzumura-ss/NicoChanWatcher
  Configuration file is: `#{conf}`.
  options:
    --help    Show this message.
    --force   Notify all-channels to Growl.
__USAGE__
  exit 0
end

ch = NicoNicoChannel.new(conf)
ch.update
ch.notify ARGV.include?("--force")
ch.save
